# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-10-21 11:16
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import pally.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PallyneUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_paid', models.BooleanField(default=False)),
                ('is_publisher', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AssociatedDatasets',
            fields=[
                ('content_id', models.AutoField(primary_key=True, serialize=False)),
                ('content_title', models.CharField(help_text='Enter content title', max_length=100)),
                ('published_date', models.DateTimeField(auto_now_add=True)),
                ('content_description', models.CharField(help_text='Enter content Description', max_length=1000)),
                ('content_views', models.PositiveIntegerField(blank=True)),
                ('content_likes', models.PositiveIntegerField(blank=True)),
                ('content_imageicon', models.ImageField(default='images/contentIcons/None/none.jpg', upload_to='images/contentIcons/')),
                ('dataset_download', models.FileField(upload_to='static/datasets/%Y/%m/%d/')),
                ('slug', models.SlugField(max_length=250, unique=True)),
            ],
            options={
                'verbose_name_plural': 'AssociatedDatasets',
            },
        ),
        migrations.CreateModel(
            name='Authors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Enter author first name', max_length=100)),
                ('last_name', models.CharField(help_text="Enter author's last name", max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Authors',
            },
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('order', pally.fields.OrderPallyneFields(blank=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('overview', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('slug', models.SlugField(max_length=250, unique=True)),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='LearnerProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facebook_link', models.URLField(blank=True, max_length=100)),
                ('twitter_link', models.URLField(blank=True, max_length=100)),
                ('institution', models.CharField(blank=True, help_text='Enter your University, College or Company name', max_length=100)),
                ('country_name', models.CharField(choices=[('Kenya', 'Kenya'), ('Japan', 'Japan')], max_length=100)),
                ('profile_photo', models.ImageField(default='images/profilephotos/none.jpg', upload_to='images/profilephotos/%Y/%m/%d/')),
            ],
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('slug', models.SlugField(max_length=250, unique=True)),
                ('order', pally.fields.OrderPallyneFields(blank=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='pally.Course')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='PallyneVideo',
            fields=[
                ('content_id', models.AutoField(primary_key=True, serialize=False)),
                ('content_title', models.CharField(help_text='Enter content title', max_length=100)),
                ('published_date', models.DateTimeField(auto_now_add=True)),
                ('content_description', models.CharField(help_text='Enter content Description', max_length=1000)),
                ('content_views', models.PositiveIntegerField(blank=True)),
                ('content_likes', models.PositiveIntegerField(blank=True)),
                ('content_imageicon', models.ImageField(default='images/contentIcons/None/none.jpg', upload_to='images/contentIcons/')),
                ('video_url', models.URLField(help_text='Enter Video URL', max_length=100)),
                ('applicable_industrial_area', models.CharField(blank=True, help_text=' Enter Applicable Industry', max_length=200)),
                ('video_script', models.TextField(blank=True, help_text='Enter a script for the video ')),
                ('video_length', models.CharField(blank=True, help_text='Enter approximate length of the video', max_length=50)),
                ('v_intensity', models.CharField(choices=[('Beginner', 'Beginner'), ('Intermediate', 'Intermediate'), ('Advanced', 'Advanced')], max_length=15)),
                ('slug', models.SlugField(max_length=250, unique=True)),
                ('associated_datasets', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='pally.AssociatedDatasets', verbose_name='Associated Datasets')),
            ],
            options={
                'ordering': ('-published_date',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReferenceBook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_imageicon', models.ImageField(default='images/contentIcons/None/book.jpg', upload_to='images/contentIcons/')),
                ('book_title', models.CharField(help_text='Enter a title for the book ', max_length=100)),
                ('book_preview_link', models.URLField(help_text="Enter book's preview link")),
                ('buy_booklink', models.URLField(blank=True, help_text='Enter URL for Purchasing Book')),
                ('book_description', models.CharField(help_text='Enter a description of the book', max_length=1000)),
                ('slug', models.SlugField(max_length=250, unique=True)),
                ('book_authors', models.ManyToManyField(to='pally.Authors', verbose_name='Book Authors')),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('publisher_name', models.CharField(blank=True, help_text="Enter a publisher's name", max_length=100)),
                ('website', models.URLField(blank=True, help_text="Enter publisher's website", max_length=100)),
                ('publisher_logo', models.ImageField(default='images/logos/none/none.jpg', upload_to='images/logos/%Y/%m/%d/')),
                ('slug', models.SlugField(max_length=250, unique=True)),
            ],
        ),
        migrations.AddField(
            model_name='pallynevideo',
            name='reference_books',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='pally.ReferenceBook', verbose_name='Video Reference Books'),
        ),
        migrations.AddField(
            model_name='pallynevideo',
            name='subject',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='pally.Subject'),
        ),
        migrations.AddField(
            model_name='learnerprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='course',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='pally.Subject'),
        ),
        migrations.AddField(
            model_name='content',
            name='module',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contents', to='pally.Module'),
        ),
        migrations.AddField(
            model_name='pallyneuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='pallyneuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='pallynevideo',
            name='content_publisher',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='pally.Publisher'),
        ),
        migrations.AddField(
            model_name='course',
            name='publisher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses_created', to='pally.Publisher'),
        ),
        migrations.AddField(
            model_name='associateddatasets',
            name='content_publisher',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='pally.Publisher'),
        ),
    ]
